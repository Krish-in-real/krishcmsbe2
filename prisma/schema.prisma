generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "mysql"
url = env("DATABASE_URL")
}

model Account {
id Int @id @default(autoincrement())
firstName String
lastName String
hashedPassword String
email String @unique
}

model Member {
memberId Int @id @default(autoincrement())
firstName String @db.VarChar(50)
lastName String @db.VarChar(50)
email String @unique @db.VarChar(100)
hashedPassword String @db.VarChar(255)
userRole UserRole @default(member)
bio String @default("") @db.VarChar(255)
skills String @default("") @db.VarChar(255)
createdOn DateTime @default(now())
modifiedOn DateTime @updatedAt

registrations Registration[]
contributions Contribution[]
reviews Review[] @relation("ReviewEvaluator") // Removed fields and references here
mentorPrograms Mentorship[] @relation("Mentor")
menteePrograms Mentorship[] @relation("Mentee")
}

model Review {
reviewId Int @id @default(autoincrement())
contributionId Int
evaluatorId Int
feedbackText String?
score Int
feedbackDate DateTime
createdOn DateTime @default(now())
modifiedOn DateTime @updatedAt

contribution Contribution @relation(fields: [contributionId], references: [contributionId])
evaluator Member @relation("ReviewEvaluator", fields: [evaluatorId], references: [memberId]) // Correctly specifies fields and references
}

model Workshop {
workshopId Int @id @default(autoincrement())
title String @db.VarChar(100)
details String?
startDatetime DateTime
endDatetime DateTime
cost Float?
venue String? @db.VarChar(255)
virtualLink String? @db.VarChar(255)
resourceLink String? @db.VarChar(255)
createdOn DateTime @default(now())
modifiedOn DateTime @updatedAt

registrations Registration[]
contributions Contribution[]
agendas Agenda[]
}

model Registration {
registrationId Int @id @default(autoincrement())
memberId Int
workshopId Int
signupDate DateTime
ticketCategory TicketCategory
transactionStatus PaymentStatus @default(pending)
createdOn DateTime @default(now())
modifiedOn DateTime @updatedAt

member Member @relation(fields: [memberId], references: [memberId])
workshop Workshop @relation(fields: [workshopId], references: [workshopId])
}

model Contribution {
contributionId Int @id @default(autoincrement())
workshopId Int
memberId Int
headline String @db.VarChar(255)
summary String?
submissionTime DateTime
currentState SubmissionState @default(drafted)
createdOn DateTime @default(now())
modifiedOn DateTime @updatedAt

workshop Workshop @relation(fields: [workshopId], references: [workshopId])
member Member @relation(fields: [memberId], references: [memberId])
reviews Review[]
}

model Agenda {
agendaId Int @id @default(autoincrement())
workshopId Int
scheduledTime DateTime
location String? @db.VarChar(255)
createdOn DateTime @default(now())
modifiedOn DateTime @updatedAt

workshop Workshop @relation(fields: [workshopId], references: [workshopId])
}

model Mentorship {
mentorshipId Int @id @default(autoincrement())
mentorUserId Int
menteeUserId Int
initiationDate DateTime
conclusionDate DateTime?
mentorshipState MentorshipState @default(active)
createdOn DateTime @default(now())
modifiedOn DateTime @updatedAt

mentor Member @relation("Mentor", fields: [mentorUserId], references: [memberId])
mentee Member @relation("Mentee", fields: [menteeUserId], references: [memberId])
}

enum UserRole {
member
coordinator
evaluator
advisor
administrator
}

enum TicketCategory {
standard
scholar
exclusive
}

enum PaymentStatus {
pending
settled
declined
}

enum SubmissionState {
drafted
in_review
approved
dismissed
}

enum MentorshipState {
active
completed
halted
}
